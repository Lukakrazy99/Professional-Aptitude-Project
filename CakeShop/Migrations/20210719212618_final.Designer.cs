// <auto-generated />
using CakeShop.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace WAG.Migrations
{
    [DbContext(typeof(CakeShopDbContext))]
    [Migration("20210719212618_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CakeShop.Core.Models.CarroComprasItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarroComprasId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("JogoId");

                    b.Property<int>("Qnt");

                    b.HasKey("Id");

                    b.HasIndex("JogoId");

                    b.ToTable("CarroComprasItems");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Categoria", b =>
                {
                    b.Property<int>("Id_Categoria")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id_Categoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Classificacao", b =>
                {
                    b.Property<int>("Id_Classificacao")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Username");

                    b.Property<int>("rate");

                    b.HasKey("Id_Classificacao");

                    b.ToTable("Cassificacoes");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Compra", b =>
                {
                    b.Property<int>("Id_Compra")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Dt_Compra")
                        .IsRequired();

                    b.Property<int>("Id_Fornecedor");

                    b.Property<int>("Id_Funcionario");

                    b.Property<int>("Id_Jogo");

                    b.Property<decimal>("Preço");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id_Compra");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome_Completo")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<string>("UsertId");

                    b.Property<string>("email")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Imagem", b =>
                {
                    b.Property<int>("Id_Imagem")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Id_Capitulo");

                    b.Property<string>("imagem")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id_Imagem");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Jogo", b =>
                {
                    b.Property<int>("Id_Jogo")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoriaId")
                        .IsRequired();

                    b.Property<string>("Especificacoes")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PDescricao")
                        .IsRequired();

                    b.Property<int?>("PlataformaId")
                        .IsRequired();

                    b.Property<int>("Preco")
                        .HasMaxLength(255);

                    b.Property<int>("Qualidade");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id_Jogo");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("PlataformaId");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<DateTime>("Data");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("NIF")
                        .HasMaxLength(9);

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Telemovel")
                        .HasMaxLength(13);

                    b.Property<decimal>("TotalVenda");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CakeShop.Core.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nomejogo")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("OrderId");

                    b.Property<decimal>("Preco");

                    b.Property<int>("Qnt");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Plataforma", b =>
                {
                    b.Property<int>("Id_Plataforma")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id_Plataforma");

                    b.ToTable("Plataformas");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Review", b =>
                {
                    b.Property<int>("Id_Review")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JogoId");

                    b.Property<string>("Text");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("User");

                    b.HasKey("Id_Review");

                    b.HasIndex("JogoId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Venda", b =>
                {
                    b.Property<int>("Id_Venda")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Dt_Venda")
                        .IsRequired();

                    b.Property<int>("Id_Cliente");

                    b.Property<int>("Id_Jogo");

                    b.Property<decimal>("Preço");

                    b.HasKey("Id_Venda");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CakeShop.Core.Models.CarroComprasItem", b =>
                {
                    b.HasOne("CakeShop.Core.Models.Jogo", "jogo")
                        .WithMany()
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CakeShop.Core.Models.Funcionario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CakeShop.Core.Models.Jogo", b =>
                {
                    b.HasOne("CakeShop.Core.Models.Categoria", "Categoria")
                        .WithMany("Jogos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CakeShop.Core.Models.Plataforma", "Plataforma")
                        .WithMany("Jogos")
                        .HasForeignKey("PlataformaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CakeShop.Core.Models.Order", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CakeShop.Core.Models.OrderDetail", b =>
                {
                    b.HasOne("CakeShop.Core.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CakeShop.Core.Models.Review", b =>
                {
                    b.HasOne("CakeShop.Core.Models.Jogo", "jogo")
                        .WithMany()
                        .HasForeignKey("JogoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
